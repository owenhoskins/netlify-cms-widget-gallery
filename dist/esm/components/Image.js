"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Handle legacy names for image queries.
const convertProps = props => {
  let convertedProps = _objectSpread({}, props);

  if (convertedProps.responsiveResolution) {
    convertedProps.resolutions = convertedProps.responsiveResolution;
    delete convertedProps.responsiveResolution;
  }

  if (convertedProps.responsiveSizes) {
    convertedProps.sizes = convertedProps.responsiveSizes;
    delete convertedProps.responsiveSizes;
  }

  return convertedProps;
}; // Cache if we've seen an image before so we don't both with
// lazy-loading & fading in on subsequent mounts.


const imageCache = {};

const inImageCache = props => {
  const convertedProps = convertProps(props); // Find src

  const src = convertedProps.sizes ? convertedProps.sizes.src : convertedProps.resolutions.src;

  if (imageCache[src]) {
    return true;
  } else {
    imageCache[src] = true;
    return false;
  }
};

let io;
const listeners = [];

function getIO() {
  if (typeof io === `undefined` && typeof window !== `undefined` && window.IntersectionObserver) {
    io = new window.IntersectionObserver(entries => {
      entries.forEach(entry => {
        listeners.forEach(l => {
          if (l[0] === entry.target) {
            // Edge doesn't currently support isIntersecting, so also test for an intersectionRatio > 0
            if (entry.isIntersecting || entry.intersectionRatio > 0) {
              //console.log('Observer: ', entry, entry.isIntersecting)
              io.unobserve(l[0]);
              l[1]();
            }
          }
        });
      });
    }, {
      rootMargin: `200px`
    });
  }

  return io;
}

const listenToIntersections = (el, cb) => {
  getIO().observe(el);
  listeners.push([el, cb]);
};

let isWebpSupportedCache = null;

const isWebpSupported = () => {
  if (isWebpSupportedCache !== null) {
    return isWebpSupportedCache;
  }

  const elem = typeof window !== `undefined` ? window.document.createElement(`canvas`) : {};

  if (elem.getContext && elem.getContext(`2d`)) {
    isWebpSupportedCache = elem.toDataURL(`image/webp`).indexOf(`data:image/webp`) === 0;
  } else {
    isWebpSupportedCache = false;
  }

  return isWebpSupportedCache;
};

const noscriptImg = props => {
  const _props$opacity = props.opacity,
        opacity = _props$opacity === void 0 ? `` : _props$opacity,
        src = props.src,
        srcSet = props.srcSet,
        _props$sizes = props.sizes,
        sizes = _props$sizes === void 0 ? `` : _props$sizes,
        _props$title = props.title,
        title = _props$title === void 0 ? `` : _props$title,
        _props$alt = props.alt,
        alt = _props$alt === void 0 ? `` : _props$alt,
        _props$width = props.width,
        width = _props$width === void 0 ? `` : _props$width,
        _props$height = props.height,
        height = _props$height === void 0 ? `` : _props$height,
        _props$transitionDela = props.transitionDelay,
        transitionDelay = _props$transitionDela === void 0 ? `` : _props$transitionDela;
  return `<img width=${width} height=${height} src="${src}" srcset="${srcSet}" alt="${alt}" title="${title}" sizes="${sizes}" style="position:absolute;top:0;left:0;transition:opacity 0.5s;transition-delay:${transitionDelay};opacity:${opacity};width:100%;height:100%;object-fit:contain;objectPosition:center"/>`;
};

const Img = props => {
  const style = props.style,
        objectFit = props.objectFit,
        objectPosition = props.objectPosition,
        opacity = props.opacity,
        onLoad = props.onLoad,
        _props$transitionDela2 = props.transitionDelay,
        transitionDelay = _props$transitionDela2 === void 0 ? `` : _props$transitionDela2,
        otherProps = _objectWithoutProperties(props, ["style", "objectFit", "objectPosition", "opacity", "onLoad", "transitionDelay"]);

  return (0, _core.jsx)("img", _extends({
    draggable: "false",
    ondragstart: "return false;"
  }, otherProps, {
    onLoad: onLoad,
    css:
    /*#__PURE__*/
    (0, _css2.default)(_objectSpread({
      position: `absolute`,
      top: 0,
      left: 0,
      transition: `opacity 1s`,
      transitionDelay,
      opacity,
      width: `100%`,
      height: `100%`,
      objectFit: objectFit ? objectFit : `contain`,
      objectPosition: objectPosition ? objectPosition : `top center`,
      fontFamily: `'object-fit: ${objectFit ? objectFit : 'contain'}; object-position: ${objectPosition ? objectPosition : 'top center'};'`
    }, style), "label:Img;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }));
};

Img.propTypes = {
  opacity: _propTypes.default.number,
  transitionDelay: _propTypes.default.string,
  onLoad: _propTypes.default.func
};

class Image extends _react.default.Component {
  constructor(props) {
    super(props); // If this browser doesn't support the IntersectionObserver API
    // we default to start downloading the image right away.

    let isVisible = true;
    let imgLoaded = true;
    let IOSupported = false; // If this image has already been loaded before then we can assume it's
    // already in the browser cache so it's cheap to just show directly.

    const seenBefore = inImageCache(props);

    if (!seenBefore && typeof window !== `undefined` && window.IntersectionObserver) {
      isVisible = false;
      imgLoaded = false;
      IOSupported = true;
    } // Always don't render image while server rendering


    if (typeof window === `undefined`) {
      isVisible = false;
      imgLoaded = false;
    }

    this.state = {
      isVisible,
      imgLoaded,
      IOSupported,
      showBase64: true
    };
    this.handleRef = this.handleRef.bind(this);
  }

  handleRef(ref) {
    if (this.state.IOSupported && ref) {
      listenToIntersections(ref, () => {
        this.setState({
          isVisible: true,
          imgLoaded: false
        });
      });
    }
  }

  render() {
    const _convertProps = convertProps(this.props),
          title = _convertProps.title,
          alt = _convertProps.alt,
          className = _convertProps.className,
          outerWrapperClassName = _convertProps.outerWrapperClassName,
          _convertProps$outerCs = _convertProps.outerCss,
          outerCss = _convertProps$outerCs === void 0 ? {} : _convertProps$outerCs,
          _convertProps$innerCs = _convertProps.innerCss,
          innerCss = _convertProps$innerCs === void 0 ? {} : _convertProps$innerCs,
          _convertProps$style = _convertProps.style,
          style = _convertProps$style === void 0 ? {} : _convertProps$style,
          sizes = _convertProps.sizes,
          resolutions = _convertProps.resolutions,
          backgroundColor = _convertProps.backgroundColor,
          objectFit = _convertProps.objectFit,
          objectPosition = _convertProps.objectPosition,
          customAspect = _convertProps.customAspect,
          base64Style = _convertProps.base64Style;

    let bgColor;

    if (typeof backgroundColor === `boolean`) {
      bgColor = `lightgray`;
    } else {
      bgColor = backgroundColor;
    }

    if (sizes) {
      const image = sizes; // Use webp by default if browser supports it

      if (image.srcWebp && image.srcSetWebp && isWebpSupported()) {
        image.src = image.srcWebp;
        image.srcSet = image.srcSetWebp;
      }

      const defaultAspect = {
        width: `100%`,
        paddingBottom: `${100 / image.aspectRatio}%`
      };
      const defaultBase64Style = {
        filter: this.state.showBase64 ? 'blur(15px)' : '',
        transform: this.state.showBase64 ? 'scale(1.5)' : '' // The outer div is necessary to reset the z-index to 0.

      };
      return (0, _core.jsx)("div", {
        className: `image-outer-wrapper`,
        css:
        /*#__PURE__*/
        (0, _css2.default)({
          zIndex: 0,
          // Let users set component to be absolutely positioned.
          position: style.position === `absolute` ? `initial` : `relative`,
          width: '100%'
        }, "label:Image;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
        style: _objectSpread({}, outerCss)
      }, (0, _core.jsx)("div", {
        className: `gatsby-image-wrapper`,
        css:
        /*#__PURE__*/
        (0, _css2.default)(_objectSpread({
          position: `relative`,
          overflow: `hidden`,
          zIndex: 1
        }, innerCss), "label:Image;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
        ref: this.handleRef
      }, (0, _core.jsx)("div", {
        style: _objectSpread({}, customAspect ? customAspect : defaultAspect)
      }), image.base64 && (0, _core.jsx)(Img, {
        alt: alt,
        title: title,
        src: image.base64,
        opacity: !this.state.imgLoaded ? 0.5 : 0,
        transitionDelay: `0.5s`,
        objectFit: objectFit,
        style: _objectSpread({}, base64Style ? base64Style : defaultBase64Style)
      }), image.tracedSVG && (0, _core.jsx)(Img, {
        alt: alt,
        title: title,
        src: image.tracedSVG,
        opacity: !this.state.imgLoaded ? 1 : 0,
        transitionDelay: `0.25s`
      }), bgColor && (0, _core.jsx)("div", {
        title: title,
        style: {
          backgroundColor: bgColor,
          position: `absolute`,
          top: 0,
          bottom: 0,
          opacity: !this.state.imgLoaded ? 1 : 0,
          transitionDelay: `0.35s`,
          right: 0,
          left: 0
        }
      }), this.state.isVisible && (0, _core.jsx)(Img, {
        alt: alt,
        title: title,
        srcSet: image.srcSet,
        src: image.src,
        sizes: image.sizes,
        objectFit: objectFit,
        objectPosition: objectPosition,
        transitionDelay: `0.5s`,
        opacity: this.state.imgLoaded || this.props.fadeIn === false ? 1 : 0,
        onLoad: () => {
          this.state.IOSupported && this.setState({
            imgLoaded: true
          });
          this.props.onLoad && this.props.onLoad(); //setTimeout(() => this.setState({showBase64: false}), 500)
        }
      }), (0, _core.jsx)("noscript", {
        dangerouslySetInnerHTML: {
          __html: noscriptImg(_objectSpread({
            alt,
            title
          }, image))
        }
      })));
    }

    if (resolutions) {
      const image = resolutions;

      const divStyle = _objectSpread({
        position: `relative`,
        overflow: `hidden`,
        display: `inline-block`,
        zIndex: 1,
        width: image.width,
        height: image.height
      }, style);

      if (style.display === `inherit`) {
        delete divStyle.display;
      } // Use webp by default if browser supports it


      if (image.srcWebp && image.srcSetWebp && isWebpSupported()) {
        image.src = image.srcWebp;
        image.srcSet = image.srcSetWebp;
      } // The outer div is necessary to reset the z-index to 0.


      return (0, _core.jsx)("div", {
        className: `${outerWrapperClassName ? outerWrapperClassName : ``} gatsby-image-outer-wrapper`,
        style: {
          zIndex: 0,
          // Let users set component to be absolutely positioned.
          position: style.position === `absolute` ? `initial` : `relative`
        }
      }, (0, _core.jsx)("div", {
        className: `${className ? className : ``} gatsby-image-wrapper`,
        style: divStyle,
        ref: this.handleRef
      }, image.base64 && (0, _core.jsx)(Img, {
        alt: alt,
        title: title,
        src: image.base64,
        opacity: !this.state.imgLoaded ? 1 : 0,
        transitionDelay: `0.35s`
      }), image.tracedSVG && (0, _core.jsx)(Img, {
        alt: alt,
        title: title,
        src: image.tracedSVG,
        opacity: !this.state.imgLoaded ? 1 : 0,
        transitionDelay: `0.25s`
      }), bgColor && (0, _core.jsx)("div", {
        title: title,
        style: {
          backgroundColor: bgColor,
          width: image.width,
          opacity: !this.state.imgLoaded ? 1 : 0,
          transitionDelay: `0.25s`,
          height: image.height
        }
      }), this.state.isVisible && (0, _core.jsx)(Img, {
        alt: alt,
        title: title,
        width: image.width,
        height: image.height,
        srcSet: image.srcSet,
        src: image.src,
        opacity: this.state.imgLoaded || this.props.fadeIn === false ? 1 : 0,
        onLoad: () => {
          this.setState({
            imgLoaded: true
          });
          this.props.onLoad && this.props.onLoad();
        }
      }), (0, _core.jsx)("noscript", {
        dangerouslySetInnerHTML: {
          __html: noscriptImg(_objectSpread({
            alt,
            title,
            width: image.width,
            height: image.height
          }, image))
        }
      })));
    }

    return null;
  }

}

Image.defaultProps = {
  fadeIn: true,
  alt: ``
};
Image.propTypes = {
  responsiveResolution: _propTypes.default.object,
  responsiveSizes: _propTypes.default.object,
  resolutions: _propTypes.default.object,
  sizes: _propTypes.default.object,
  fadeIn: _propTypes.default.bool,
  title: _propTypes.default.string,
  alt: _propTypes.default.string,
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  // Support Glamor's css prop.
  outerWrapperClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  style: _propTypes.default.object,
  position: _propTypes.default.string,
  backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
  onLoad: _propTypes.default.func
};
var _default = Image;
exports.default = _default;
//# sourceMappingURL=Image.js.map